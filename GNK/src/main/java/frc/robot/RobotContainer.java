// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot;

import java.io.IOException;
import java.nio.file.Path;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.Filesystem;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.controller.PIDController;
import edu.wpi.first.wpilibj.controller.RamseteController;
import edu.wpi.first.wpilibj.controller.SimpleMotorFeedforward;
import edu.wpi.first.wpilibj.trajectory.Trajectory;
import edu.wpi.first.wpilibj.trajectory.TrajectoryUtil;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.RamseteCommand;
import edu.wpi.first.wpilibj2.command.button.Button;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import frc.robot.commands.ManualSliderFunnel;
import frc.robot.commands.StickDrive;
import frc.robot.commands.Lift1.Motor.DOWN;
import frc.robot.commands.Lift1.Motor.STOP;
import frc.robot.commands.Lift1.Motor.UP;
import frc.robot.commands.Lift1.Servo.ARMED;
import frc.robot.commands.Lift1.Servo.DISARMED;
import frc.robot.commands.Lift2.Motor.DOWN2;
import frc.robot.commands.Lift2.Motor.STOP2;
import frc.robot.commands.Lift2.Motor.UP2;
import frc.robot.commands.Lift2.Servo.ARMED2;
import frc.robot.commands.Lift2.Servo.DISARMED2;
import frc.robot.subsystems.Drive;
import frc.robot.subsystems.Funnel;
import frc.robot.subsystems.Lift1;
import frc.robot.subsystems.Lift2;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class RobotContainer {


    private final Drive drive = Robot.drive;
    public static Funnel funnel = Robot.funnel;
    private final Lift2 Lift2 = Robot.Lift2;
    private final Lift1 Lift = Robot.Lift;

    private final StickDrive stickDrive = new StickDrive(drive);

    private final ManualSliderFunnel manFunnel = new ManualSliderFunnel();

    public Joystick driveStick = new Joystick(0);
    public Joystick arduino = new Joystick(1);
    Button LiftUp;
    Button LiftDown;
    Button ServoArmed;
    Button ServoDisarmed;
    Button LiftUp2;
    Button LiftDown2;
    Button ServoArmed2;
    Button ServoDisarmed2;

    


    /**
   * The container for the robot.  Contains subsystems, OI devices, and commands.
   */
    public RobotContainer() {
        // Configure the button bindings
        //configureButtonBindings();
        LiftUp = new JoystickButton(arduino, 10);
        LiftDown = new JoystickButton(arduino, 12);
        ServoArmed = new JoystickButton(arduino, 7);
        ServoDisarmed = new JoystickButton(arduino, 8);
        LiftUp2 = new JoystickButton(arduino, 11);
        LiftDown2 = new JoystickButton(arduino, 9);
        ServoArmed2 = new JoystickButton(arduino, 5);
        ServoDisarmed2 = new JoystickButton(arduino, 4);

        LiftUp.whileHeld(new UP());
        LiftDown.whileHeld(new DOWN());
        ServoArmed.whenPressed(new ARMED());
        ServoDisarmed.whenPressed(new DISARMED());
        LiftUp2.whileHeld(new UP2());
        LiftDown2.whileHeld(new DOWN2());
        ServoArmed2.whenPressed(new ARMED2());
        ServoDisarmed2.whenPressed(new DISARMED2());


        drive.setDefaultCommand(stickDrive);
        Lift2.setDefaultCommand(new STOP2());
        Lift.setDefaultCommand(new STOP());
        funnel.setDefaultCommand(manFunnel);
       

    }

    /**
    * Use this method to define your button->command mappings.  Buttons can be created by
    * instantiating a {@link GenericHID} or one of its subclasses ({@link
    * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
    * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
    */
    private void configureButtonBindings() {
        

    }


    /**
    * Use this to pass the autonomous command to the main {@link Robot} class.
    *
    * @return the command to run in autonomous
    */
    public Command getAutonomousCommand() {
        // An ExampleCommand will run in autonomous

        configurePathFinder();

        return new StickDrive(drive);
    }

    public void configurePathFinder() {
        String trajectoryJSON = "paths/Test.wpilib.json";

        Path trajectoryPath;
        Trajectory trajectory;

        try {
        trajectoryPath = Filesystem.getDeployDirectory().toPath().resolve(trajectoryJSON);
        trajectory = TrajectoryUtil.fromPathweaverJson(trajectoryPath);
        } 
        catch (IOException ex) {
        DriverStation.reportError("Unable to open trajectory: " + trajectoryJSON, ex.getStackTrace());
        }

    /*    RamseteCommand ramseteCommand = new RamseteCommand(
            trajectory,
            Constants.robotDrive::getPose,
            new RamseteController(AutoConstants.kRamseteB, AutoConstants.kRamseteZeta),
            new SimpleMotorFeedforward(DriveConstants.ksVolts,
                                       DriveConstants.kvVoltSecondsPerMeter,
                                       DriveConstants.kaVoltSecondsSquaredPerMeter),
            DriveConstants.kDriveKinematics,
            Constants.robotDrive::getWheelSpeeds,
            new PIDController(DriveConstants.kPDriveVel, 0, 0),
            new PIDController(DriveConstants.kPDriveVel, 0, 0),
            // RamseteCommand passes volts to the callback
            Constants.robotDrive::tankDriveVolts,
            Constants.robotDrive
        );  */
    }

}

